---
title: "general_units"
format: html
editor: visual
---

```{r}
library(maartenutils)
# 创建一个名为 "my_instance" 的实例
instance_name <- "my_instance"

# 使用 gen_dump_fn 函数生成文件路径
file_path <- gen_dump_fn(instance_name)

# 打印生成的文件路径
print(file_path)
```

#### perm_browser()

```{r}

# 这是一个R语言函数perm_browser的定义。它的作用是在交互式环境下启动一个浏览器调试器，或者在非交互式环境下生成调试信息并打印变量的值。
# 在交互式环境下调用
perm_browser()

# 在非交互式环境下调用
perm_browser(instance = my_instance, dump_dir = '~/debug_dumps')
```

#### auto_name

名为`auto_name`。它的作用是将向量的名称设置为向量中的实际值。

函数的输入参数是`vec`和`force`。`vec`是一个向量，`force`是一个逻辑值，用于指定是否强制设置向量的名称。

函数首先检查向量是否为空，如果为空，则返回`NULL`。

如果`force`为`TRUE`，函数会使用`setNames`函数将向量的名称设置为`NULL`，然后再将向量的名称设置为向量中的实际值。这样做的目的是确保向量的名称与向量中的值一致。

如果`force`为`FALSE`，函数直接将向量的名称设置为向量中的实际值。

下面是一个示例：

```{r}
vec <- c(1, 2, 3)
named_vec <- auto_name(vec)
print(named_vec)
```

在这个示例中，向量`vec`的名称被设置为与其值相同的字符串。

#### callstack_get

一个R语言函数，用于在调用堆栈中搜索特定的对象。它接受两个参数：`name`和`env`。

`name`参数是要在调用堆栈中查找的对象的名称。

`env`参数是要开始搜索的环境。默认情况下，它是父环境。

函数的工作原理如下：

1.  首先，它检查给定的环境是否为空环境（emptyenv()）。如果是空环境，它会抛出一个错误，指示无法找到指定的对象。

2.  如果给定的环境不是空环境，它会检查该环境中是否存在指定的对象。如果存在，它会使用`get()`函数从环境中获取该对象。

3.  如果指定的对象不存在于当前环境中，它会递归调用自身，将父环境作为新的环境参数，继续在父环境中查找。

这个函数的目的是在调用堆栈中查找特定的对象，即使它可能在嵌套的环境中。它可以用于在R语言中动态获取变量的值，即使这些变量在当前环境中不可见。

下面是一个示例，演示如何使用这个函数：

```{r}
# 创建一个函数
my_function <- function() {
  x <- 10
  y <- callstack_get("x")  # 在调用堆栈中查找变量"x"
  print(y)
}

# 调用函数
my_function()
```

在这个示例中，我们定义了一个函数`my_function()`，它在自己的环境中创建了一个变量`x`并赋值为10。然后，我们使用`callstack_get()`函数在调用堆栈中查找变量`x`的值，并将其赋给变量`y`。最后，我们打印出变量`y`的值，它应该是10。

这个示例展示了如何使用`callstack_get()`函数来获取调用堆栈中的变量值，即使这些变量在当前环境中不可见。

#### `eps`函数

这个函数用于比较两个数值是否在给定的误差范围内相等。它接受两个参数：`v1`和`v2`，分别表示要比较的两个数值。另外还有一个可选参数`epsilon`，用于指定误差范围，默认值为0.01。函数会返回一个逻辑值，表示两个数值是否在误差范围内相等。

例如，如果我们调用`eps(3.14, 3.14159, 0.001)`，它会返回`TRUE`，因为3.14和3.14159在误差范围0.01内相等。

```{r}
eps(3.14, 3.14159, 0.01)
```

#### `load_obj`函数

这个函数用于从文件中加载一个对象。它接受一个参数`fn`，表示要加载的文件名。函数会创建一个新的环境对象，并将文件中的对象加载到该环境中。然后，函数会返回加载的对象。

例如，如果我们调用`load_obj("data.RData")`，它会加载名为"data.RData"的文件，并返回文件中的第一个对象。

```{r}
# 首先，我们创建一个对象并保存到一个.RData文件中
my_data <- data.frame(a = 1:5, b = 6:10)
save(my_data, file = "my_data.RData")

# 然后，我们使用load_obj函数来加载这个对象
loaded_data <- load_obj("my_data.RData")

# 打印加载的数据
print(loaded_data)
```

#### `percentage_change`函数

这个函数用于计算两个数值之间的百分比变化。它接受两个参数`new`和`old`，分别表示新值和旧值。函数会先检查这两个参数是否为数值型，如果不是，则会抛出一个错误。然后，函数会根据以下规则计算百分比变化：

-   如果旧值大于0，则计算百分比变化并返回结果。

-   如果旧值不大于0，则返回NA（不可用）。

例如，如果我们调用`percentage_change(80, 100)`，它会返回-20，表示新值80相对于旧值100的百分比变化为-20%。

```{r}
# 计算百分比变化
old_value <- 100
new_value <- 120
change <- percentage_change(new_value, old_value)

# 打印结果
print(change)
```

#### replace_na

这段代码是一个R语言函数，用于替换向量中的缺失值（NA值）。函数名为`replace_na`，它接受两个参数：`vec`表示要替换的向量，`replacement`表示要替换为的值，默认为0。

函数的实现很简单。它使用逻辑条件`is.na(vec)`来判断向量中的元素是否为NA值。然后，使用赋值操作符`<-`将`replacement`的值赋给NA值所在的位置，从而实现替换。最后，函数返回替换后的向量。

下面是一个示例，演示如何使用`replace_na`函数：

```{r}
# 创建一个包含NA值的向量
vec <- c(1, 2, NA, 4, NA, 6)

# 调用replace_na函数，将NA值替换为0
result <- replace_na(vec, 0)

# 输出替换后的向量
print(result)
```

输出结果为：`1 2 0 4 0 6`，可以看到，原先的NA值已经被成功替换为了0。

#### bisect_from

它接受一个列表`li`和一个值`val`作为参数。函数的目的是**从列表中找到指定值`val`的位置，并返回从该位置开始的子列表**。

代码首先使用`%nin%`运算符来检查值`val`是否不在列表`li`中。如果不在，就会抛出一个错误，错误消息会提示指定的值不在列表中。

如果值`val`在列表中，代码会使用管道操作符`%>%`来对列表进行操作。`.[seq_along(.) >= which(. == val)]`这部分代码使用了两个函数：`seq_along()`和`which()`。`seq_along()`函数返回一个与列表长度相同的序列，而`which()`函数返回与指定条件相匹配的元素的索引。这两个函数的结合使用，可以得到一个逻辑向量，表示列表中与指定值相等的元素的位置。

最后，使用`.[seq_along(.) >= which(. == val)]`来提取从指定值位置开始的子列表，并将其作为函数的返回值。

下面是一个例子来说明函数的使用：

```{r}
my_list <- c('apple', 'banana', 'cherry', 'date', 'elderberry')
result <- bisect_from(my_list, 'cherry')
print(result)
```

#### null_dat

一个R语言函数，用于检测数据是否为空。它接受一个数据框（data.frame）作为参数，并返回一个逻辑值，指示数据是否为空。

函数首先使用`is.null()`函数检查数据是否为NULL。如果数据为NULL，函数将返回`TRUE`，表示数据为空。

接下来，函数使用`any()`函数和逻辑运算符来检查数据是否为数据框（data.frame），并且数据框的行数或列数是否为零。如果数据是一个数据框且行数或列数为零，函数将返回`TRUE`，表示数据为空。

如果数据既不是NULL，也不是空的数据框，函数将返回`FALSE`，表示数据不为空。

下面是一个使用这个函数的例子：

```{r}
# 创建一个空的数据框
empty_df <- data.frame()

# 检查数据是否为空
result <- null_dat(empty_df)
print(result)  # 输出TRUE，表示数据为空
```

#### set_dt_types

用于设置data.table对象列类型的函数。它接受一个data.table对象（命名为`fh`），一个命名的向量`col_classes`，其中包含fh的列名作为键，列类型作为值，还有一个布尔值`convert_commas`，用于指定是否将字符转换为数字时将逗号视为小数点。

该函数的主要目的是根据提供的列类型，将data.table对象的列类型进行更改。它首先检查是否提供了列类型，如果没有，则直接返回原始的data.table对象。然后，它检查data.table对象是否为空，如果是，则也直接返回原始对象。

接下来，函数定义了一个名为`convert_numeric`的内部函数，用于将字符向量转换为数值向量。如果`convert_commas`为真且向量中存在字符类型的元素，则将逗号替换为小数点后再进行转换，否则直接进行转换。

然后，函数将`col_classes`筛选为与data.table对象列名相关的列类型，并将其存储在变量`cp`中。如果`cp`的长度为0，则输出一条消息并返回原始的data.table对象。

接下来，函数根据列类型进行相应的转换操作。如果`cp`中存在字符类型的列，则将这些列的值转换为字符类型。如果`cp`中存在数值类型的列，则将这些列的值通过调用`convert_numeric`函数进行转换。类似地，对于整数、因子和逻辑类型的列，函数分别进行相应的转换操作。

最后，函数返回修改后的data.table对象。

```{r}
library(data.table)

# 创建一个示例data.table对象
dt <- data.table(
  col1 = c("1", "2", "3"),
  col2 = c("4", "5", "6"),
  col3 = c("7", "8", "9")
)

# 设置列类型
col_classes <- c(col1 = "numeric", col2 = "character", col3 = "factor")
dt <- set_dt_types(dt, col_classes)

# 打印修改后的data.table对象
print(dt)
```

#### file_name_checks

file_name_checks是一个用于检查文件名的函数。它接受一个文件名作为参数，并执行一系列检查来确定文件名是否存在问题。

函数的逻辑如下：

1.  首先，它检查文件名是否为NA（缺失值）或为空。如果是，则返回`TRUE`，表示文件名存在问题。

2.  接下来，它使用`file.size()`函数检查文件的大小。如果文件大小为NA，则返回`TRUE`，表示文件名存在问题。

3.  然后，它使用`file.exists()`函数检查文件是否存在。如果文件不存在，则返回`TRUE`，表示文件名存在问题。

4.  最后，它检查文件的大小是否为0。如果文件大小为0，则返回`TRUE`，表示文件名存在问题。

如果文件名**通过了所有的检查，函数将返回`FALSE`**，表示文件名没有问题。

这是一个示例，演示如何使用该函数：

```{r}
file_name <- "example.txt"
if (file_name_checks(file_name)) {
  print("Invalid file name!")
} else {
  print("Valid file name!")
}

file_name <- "arrange-plot.pdf"
if (file_name_checks(file_name)) {
  print("Invalid file name!")
} else {
  print("Valid file name!")
}

file_name_checks(file_name) 
```

#### strip_root

strip_root用于处理文件路径的实用函数。让我来解释一下。

在代码的第一个函数中，file_name_checks函数用于检查文件是否为空或不存在。它使用了一系列条件来判断文件是否为空。首先，它使用`is.na(fn)`来检查文件路径是否为`NA`（缺失值）。然后，它使用`is.null(fn)`来检查文件路径是否为`NULL`（空值）。接下来，它使用`is.na(file.size(fn))`来检查文件大小是否为`NA`，以确保文件大小可用。然后，它使用`!file.exists(fn)`来检查文件是否存在。最后，它使用`file.size(fn) == 0`来检查文件大小是否为零。如果满足任何一个条件，函数将返回`TRUE`，表示文件为空或不存在。

第二个函数是`strip_root`函数，用于去除文件名中的根路径结构，以便更容易阅读文件名。它接受两个参数：`fn`表示要去除根路径的文件名，`root_folder`表示要去除的根路径。函数首先使用`grepl(root_folder, fn)`来检查文件名中是否包含根路径。如果不包含根路径，函数会进一步检查根路径和文件名的组合是否存在于文件系统中，即使用`file.exists(file.path(root_folder, fn))`和`dir.exists(file.path(root_folder, fn))`来检查。如果根路径和文件名的组合在文件系统中不存在，函数会调用`mywarning`函数并输出一条警告信息，指示文件名似乎没有指定的根路径。

最后，函数使用`gsub`函数将文件名中的根路径替换为空字符串，以去除根路径。它使用`sprintf('%s/', path.expand(root_folder))`来生成要替换的根路径字符串，并使用空字符串替换它。这样，函数返回的文件名将不再包含根路径。

下面是一些示例：

```{r}
# 示例1：检查文件是否为空或不存在
getwd()
file_path <- "/home/rstudio/work/24-01-25-maartenutils/gene_expression_correlates.pdf"
file_name_checks(file_path)  # 返回 FALSE，文件存在且不为空


# 示例2：去除文件名中的根路径
file_path <- "/home/rstudio/work/24-01-25-maartenutils/gene_expression_correlates.pdf"
root_folder <- "/home/rstudio/work/24-01-25-maartenutils"
stripped_file_path <- strip_root(file_path, root_folder)
print(stripped_file_path)  # 输出 "documents/file.txt"
```

#### variabilize_character

这段代码是一个用于将字符字符串转换为变量名的函数。它接受一个字符向量作为输入，并将其转换为以下划线分隔的变量名。

函数的主要步骤如下：

1.  首先，它使用`tolower`函数将输入的字符向量转换为小写字母。

2.  然后，它使用正则表达式`gsub`将字符串中的连字符、句点和空格替换为下划线。

3.  接下来，它使用正则表达式`gsub`去除变量名开头和结尾的下划线。

4.  最后，它返回转换后的变量名。

下面是一个示例，演示如何使用这个函数：

```{r}
vec <- c("Hello World_", "This-is_a-Test ", " Another.String")
result <- variabilize_character(vec)
print(result)
```

输出结果将是：

这个函数可以帮助你将字符字符串转换为适合作为变量名的格式。

#### normalize_colnames

函数首先检查输入的数据表是否属于"data.table"类。如果是的话，它会使用`variabilize_character`函数对列名进行处理，并通过`setnames`函数将处理后的列名应用到数据表中。

如果输入的数据表不属于"data.table"类，函数会进一步检查是否属于"data.frame"或"matrix"类。如果是的话，它会直接使用`variabilize_character`函数对列名进行处理，并将处理后的列名赋值给数据表的`colnames`属性。

最后，函数返回处理后的数据表。

```{r}
library(data.table)

# 创建一个数据表
dt <- data.table(A = 1:3, B = 4:6, C = 7:9)

# 打印原始的列名
print(colnames(dt))

# 规范化列名
dt <- normalize_colnames(dt)

# 打印规范化后的列名
print(colnames(dt))
```

```{r}
# 使用write_accessible函数检查文件是否可写
filename <- "test.txt"
is_writable <- write_accessible(filename)
print(is_writable)

# 创建一个数据框
dat <- data.frame(
  A = c(1, 2, 3, NA, 5),
  B = c(NA, 7, 8, 9, 10)
)

# 使用write_tsv函数将数据框写入tsv文件
output_file <- "output.tsv"
write_tsv(dat, output_file)

# 使用pick_first_non_NA函数选择第一个非NA值
# 创建一个包含NA值的向量
values <- c(NA, NA, 3, 4, 5)

# 使用pick_first_non_NA函数选择第一个非NA值
first_non_NA <- do.call(pick_first_non_NA, as.list(values))

# 打印第一个非NA值
print(first_non_NA)
```

#### clean_columns

clean_columns是一个R语言函数，用于清理数据表中的列。让我来解释一下它的工作原理。

首先，函数的名称是`clean_columns`，它接受几个参数：`instance`（实例名称，默认为空字符），`fh`（数据表），`col_names`（要清理的列名，默认为`mut_context`），以及`verbose`（是否显示详细信息，默认为假）。

函数的第一步是检查`instance`参数是否为字符类型。如果不是字符类型，它会调用一个名为`mymessage`的函数，传递错误消息并停止执行。

接下来，函数将`fh`参数转换为一个数据表对象（data.table）。

然后，函数会根据`col_names`参数的值生成一个扩展的列名列表`col_names_m`，以处理可能出现的数据表合并错误。它使用`expand.grid`函数生成所有可能的组合，并使用`paste0`函数将它们连接起来。

接下来，函数会找出`col_names_m`中存在于数据表列名中的列名，并将它们存储在`col_names_present`变量中。

如果`col_names_present`中存在列名，函数会检查`verbose`参数的值。如果为真，则会使用`mymessage`函数显示实例名称和要清理的列名。

然后，函数会遍历`col_names_present`中的每个列名，并在数据表中删除这些列。它使用一个`while`循环来确保删除所有同名的列。

最后，函数会返回处理后的数据表。

这是一个简单的例子，演示了如何使用`clean_columns`函数：

```{r}
# 创建一个示例数据表
data <- data.table(mut_context = c("A", "B", "C"),
                   col1 = c(1, 2, 3),
                   col2 = c(4, 5, 6))

# 调用clean_columns函数，清理mut_context列
cleaned_data <- clean_columns(fh = data)

# 输出清理后的数据表
print(cleaned_data)
```

#### sub_newlines

当你编写代码时，有时你可能需要对字符串进行一些处理。在这个例子中，我们有一个名为`sub_newlines`的函数，它接受一个字符串作为输入，并将其中的空格替换为换行符。

让我们来看看这个函数的实现：

sub_newlines \<- function(x) gsub(' ','\n', x)

这个函数使用了R语言中的`gsub`函数，它是一个用于字符串替换的函数。在这里，我们将空格字符`' '`替换为换行符`'\n'`。函数的输入参数是一个字符串`x`，它表示要进行替换操作的字符串。

让我们来看一个例子，以便更好地理解这个函数的工作原理：

```{r}
text <- "Hello World! This is a sample text."
result <- sub_newlines(text)
print(result)
```

#### `cond_setnames`函数

```{r}
#' Change colnames only conditional on their presence in data.table
#'
#' @param dtf \code{data.table} object in which to change column names
#' @param old_n \code{vector} of old potentially present column names
#' @param new_n \code{vector} of substitute new column names
cond_setnames <- function(dtf, old_n, new_n) {
  if ('data.table' %nin% class(dtf)) stop('I require a data.table object')
  cols_present <- intersect(colnames(dtf), old_n)
  idx <- base::match(cols_present, old_n)
  setnames(dtf, cols_present, new_n[idx])
  invisible(dtf)
}

```

这段代码定义了一个名为`cond_setnames`的函数，用于在`data.table`对象中根据条件更改列名。

函数的参数包括：

-   `dtf`：要更改列名的`data.table`对象。

-   `old_n`：旧的可能存在的列名的向量。

-   `new_n`：替换的新列名的向量。

函数的主要逻辑如下：

1.  首先，函数会检查传入的`dtf`是否是`data.table`对象，如果不是，则会抛出一个错误。

2.  接下来，函数会找到`dtf`中存在的旧列名，并将其与`old_n`中的列名进行交集运算，得到存在的列名。

3.  然后，函数会使用`base::match`函数找到存在的列名在`old_n`中的索引。

4.  最后，函数会使用`setnames`函数将存在的列名替换为对应的新列名。

函数返回修改后的`data.table`对象，并使用`invisible`函数隐藏输出。

下面是一个示例，演示如何使用`cond_setnames`函数：

```{r}
library(data.table)

# 创建一个示例的data.table对象
dt <- data.table(a = 1:5, b = 6:10, c = 11:15)

# 调用cond_setnames函数，将列名"a"替换为"new_a"，将列名"b"替换为"new_b"
new_dt <- cond_setnames(dt, c("a", "b"), c("new_a", "new_b"))

# 输出修改后的data.table对象
print(new_dt)
```

输出结果：

```{r}
#    new_a new_b  c
# 1:     1     6 11
# 2:     2     7 12
# 3:     3     8 13
# 4:     4     9 14
# 5:     5    10 15
```

在这个示例中，我们创建了一个包含三列的`data.table`对象`dt`，然后使用`cond_setnames`函数将列名"a"替换为"new_a"，将列名"b"替换为"new_b"。最后，我们打印出修改后的`data.table`对象`new_dt`，可以看到列名已经被成功替换。

#### 异常值

```{r}

#' Test whether variables are outliers
#'
#' @return vector of booleans, TRUE if not an outlier
test_non_outlier <- function(x, probs = c(.025, .975)) {
  bounds <- quantile(x, probs = probs)
  x >= bounds[1] & x <= bounds[2]
}


#' Subselect rows that do not contain any outliers
#'


```

这段R代码定义了两个函数：`test_non_outlier`和`remove_outliers`。

`test_non_outlier`函数用于测试变量是否为异常值（outlier）。它接受一个向量 `x` 和一个概率向量 `probs`（默认为 c(.025, .975)）。函数内部使用 `quantile` 函数计算 `x` 的分位数，然后通过比较 `x` 是否在分位数范围内来判断是否为异常值。函数返回一个逻辑向量，其中为 TRUE 的元素表示不是异常值。

下面是 `test_non_outlier` 函数的示例代码：

```{r}
x <- c(1, 2, 3, 4, 5,5.2)
test_non_outlier(x)
# Output: [1] FALSE  TRUE  TRUE  TRUE FALSE
```

#### find_entries

```{r}

find_entries <- function(search_term = "hla", object = donor_summary) {
  if ('data.frame' %in% class(object)) {
    return(grep(pattern = search_term, x = colnames(object), value = T))
  } else if ('list' %in% class(object)) {
    return(grep(pattern = search_term, x = names(object), value = T))
  }
}
find_colnames <- find_entries


```

这段代码定义了一个名为`find_entries`的函数，它用于在给定的对象中查找包含指定搜索词的条目。函数接受两个参数：`search_term`表示要搜索的词语，默认为"hla"；`object`表示要搜索的对象，默认为`donor_summary`。

函数首先检查`object`的类别。如果`object`是一个数据框（data.frame），则使用`grep`函数在列名`colnames(object)`中搜索匹配`search_term`的条目，并返回结果。如果`object`是一个列表（list），则使用`grep`函数在列表的名称 `names(object)` 中搜索匹配`search_term`的条目，并返回结果。

下面是一个示例，演示如何使用这个函数：

```{r}
library(maartenutils)
# 创建一个数据框
df <- data.frame(
  hla_gene = c("HLA-A", "HLA-B", "HLA-C"),
  other_gene = c("Gene1", "Gene2", "Gene3")
)

# 调用find_entries函数，在数据框中查找包含"hla"的列名
result <- find_entries("hla", df)
print(result)
```

#### clear_warnings

```{r}


#' Clear all warnings
#'
#'
clear_warnings <- function() {
  unlockBinding("last.warning", baseenv())
  assign("last.warning", NULL, envir = baseenv())
  assign("last.warning", NULL, envir = globalenv())
}


```

这段代码定义了一个名为`clear_warnings`的函数，它的作用是清除所有的警告信息。

函数内部的代码逐步完成了清除警告的过程。首先，使用`unlockBinding`函数解除了`last.warning`变量在基础环境（baseenv()）中的绑定。然后，使用`assign`函数将`last.warning`变量在基础环境和全局环境（globalenv()）中的值都设置为`NULL`，从而清除了警告信息。

这个函数可以在需要清除警告信息的时候调用，以确保代码执行过程中不会受到之前的警告信息的干扰。例如，在进行一些重要计算之前，可以调用这个函数来清除之前可能产生的警告，以确保计算结果的准确性。

在R语言中，`unlockBinding`函数用于解除一个变量与其值之间的绑定关系。当一个变量被锁定（locked）时，你不能更改它的值。解锁后，你就可以更改这个变量的值了。

在你给出的代码中，`unlockBinding("last.warning", baseenv())`这行代码的作用是解除`last.warning`这个变量在基础环境（baseenv）中的绑定关系。`last.warning`是R语言中用于存储最后一次警告信息的预定义变量。解除绑定后，就可以通过`assign`函数更改`last.warning`的值，从而清除警告信息。

这是一个比较高级的R语言特性，通常在你需要更改一些预定义变量或者环境变量的值时会用到。在大多数情况下，你可能不需要使用`unlockBinding`函数。

#### named_vec_to_dt

```{r}

named_vec_to_dt <- function(vec, dtcolnames = names(fh)) {
  fh <- data.table(names(vec), vec)
  setnames(fh, dtcolnames)
  return(fh)
}
```

这段代码定义了一个名为`named_vec_to_dt`的函数，它的作用是将一个命名向量转换为一个包含两列的`data.table`对象。

函数接受两个参数：`vec`和`dtcolnames`。`vec`是要转换的命名向量，`dtcolnames`是要为生成的`data.table`对象设置的列名。

函数的主要逻辑是使用`data.table`函数创建一个新的`data.table`对象`fh`，其中包含两列。第一列是命名向量的名称，第二列是命名向量的值。然后，使用`setnames`函数将列名设置为`dtcolnames`中指定的名称。最后，函数返回生成的`data.table`对象`fh`。

下面是一个示例，演示如何使用这个函数：

```{r}
# 创建一个命名向量
my_vec <- c(a = 1, b = 2, c = 3)

# 调用named_vec_to_dt函数将命名向量转换为data.table对象
my_dt <- named_vec_to_dt(my_vec)

# 打印生成的data.table对象
print(my_dt)
```

```{r}
my_table <- function(vec = c('A', 'A', 'C'), expected = c('A', 'B', 'C')) {
  ret <- table(vec)
  missing_labs <- auto_name(setdiff(expected, names(ret)))
  ret <- c(setNames(rep(0, length(missing_labs)), missing_labs), ret)
  return(ret[expected])
}
```

这段代码定义了一个名为`my_table`的函数。让我们逐步解释它的功能和实现细节。

该函数接受两个参数：`vec`和`expected`。`vec`是一个包含数据的向量，`expected`是一个包含期望值的向量。默认情况下，`vec`被设置为`c('A', 'A', 'C')`，`expected`被设置为`c('A', 'B', 'C')`。

函数的主要目的是计算`vec`中每个元素的频数，并按照`expected`的顺序返回结果。让我们逐步分析函数的实现过程。

首先，函数使用`table()`函数计算`vec`中每个元素的频数，并将结果存储在变量`ret`中。

接下来，函数使用`setdiff()`函数找出`expected`中存在但在`vec`中不存在的元素，并将其存储在变量`missing_labs`中。这些元素被认为是缺失的标签。

然后，函数使用`auto_name()`函数为缺失的标签生成自动命名。`auto_name()`函数的具体实现我们无法确定，但它可能是一个自定义函数，根据输入的向量生成自动命名的标签。

接着，函数使用`setNames()`函数将缺失的标签与值为0的向量进行匹配，并将结果存储在变量`ret`中。这样做是为了**确保结果中包含了所有期望的标签，并将它们的频数设置为0**。

最后，函数使用`ret[expected]`返回按照`expected`顺序排列的结果。

```{r}
# Test case 1: All elements in vec match the corresponding elements in expected
vec1 <- c('A', 'A', 'C')
expected1 <- c('A', 'B', 'C')
result1 <- my_table(vec1, expected1)


# Test case 2: Some elements in vec do not match the corresponding elements in expected
vec2 <- c('A', 'B', 'C')
expected2 <- c('A', 'B', 'C')
result2 <- my_table(vec2, expected2)
# Expected output: FALSE
result2


# Test case 3: All elements in vec match the corresponding elements in expected, but in a different order
vec3 <- c('C', 'A', 'A')
expected3 <- c('A', 'B', 'C')
result3 <- my_table(vec3, expected3)
result3


# Test case 4: Empty vectors
vec4 <- c()
expected4 <- c()
result4 <- my_table(vec4, expected4)
result4



# Test case 5: Vectors with different lengths
vec5 <- c('A', 'A', 'C')
expected5 <- c('A', 'B')
result5 <- my_table(vec5, expected5)
result5
# A B 
# 2 0 
```

#### cond_rm

```{r}

#' Remove object conditional on its existence in environment env
#'
#'
cond_rm <- function(..., env = globalenv(), verbose = F) {
  fcall <- match.call()
  ## Strip away function name
  object_list <- as.list(fcall)[-1]
  ## Strip away other arguments to function call
  if (!is.null(names(object_list))) {
    ## Determine what named arguments need to disappear
    o_names <- intersect(names(object_list), c('env', 'verbose'))
    object_list <- object_list[names(object_list) %nin% o_names]
  }
  object_list <- unique(as.character(object_list))

  for (obj in object_list) {
    if (exists(obj, envir = env)) {
      rm(list = c(obj), envir = env)
    } else if (verbose) {
      mymessage(msg = paste0(obj, ' not found'))
    }
  }
}


```

这段代码定义了一个名为`cond_rm`的函数，用于在指定的环境中删除对象（变量、函数等），前提是这些对象在该环境中存在。

函数的参数包括：

-   `...`：可变数量的对象参数，表示要删除的对象。

-   `env`：环境参数，表示要在哪个环境中删除对象。默认为全局环境。

-   `verbose`：布尔值参数，表示是否显示删除过程的详细信息。默认为`FALSE`。

函数的主要逻辑如下：

1.  首先，函数使用`match.call()`获取函数调用的完整信息，并将其存储在`fcall`变量中。

2.  然后，函数将`fcall`转换为列表形式，并去除函数名，得到一个包含要删除对象的列表`object_list`。

3.  接下来，函数检查`object_list`中的命名参数，并将其与`env`和`verbose`进行比较，确定哪些命名参数需要从列表中删除。

4.  函数将`object_list`转换为字符向量，并去除重复的元素。

5.  最后，函数使用循环遍历`object_list`中的每个对象。如果对象在指定的环境中存在，则使用`rm()`函数将其从环境中删除。如果对象不存在且`verbose`为`TRUE`，则会显示一条消息表示对象未找到。

下面是一个示例，演示如何使用`cond_rm`函数删除全局环境中的两个对象：

```{r}
x <- 10
y <- 20

cond_rm(x, y, env = globalenv(), verbose = TRUE)
```

在这个例子中，函数将删除全局环境中的`x`和`y`对象。如果`verbose`参数设置为`TRUE`，则会显示消息表示对象已被删除。如果对象不存在，则会显示消息表示对象未找到。

在这段R代码中，`...`是传递给`cond_rm`函数的参数。这个`...`参数表示可以接收任意数量和类型的参数。在函数体内部，通过`match.call()`获取到函数调用的完整信息，然后将其转换为列表形式，这样就可以获取到传递给`...`的所有参数。这些参数被用于构建`object_list`，这个列表包含了要从指定环境中删除的对象的名称。

这个`cond_rm`函数的主要优点是它可以安全地删除对象。如果你直接使用`rm()`函数删除一个不存在的对象，R会抛出一个错误。但是，`cond_rm`函数会先检查对象是否存在，只有在对象存在的情况下才会删除它，这样就避免了抛出错误。

此外，`cond_rm`函数还有以下优点：

1.  可以删除多个对象：你可以一次性传入多个对象的名称，`cond_rm`函数会依次删除这些对象。

2.  可以指定环境：你可以指定在哪个环境中删除对象。这对于删除非全局环境中的对象非常有用。

3.  提供详细信息：如果设置了`verbose`参数，`cond_rm`函数会提供关于删除过程的详细信息，例如，如果尝试删除的对象不存在，它会显示一条消息。

总的来说，虽然`cond_rm`函数的代码比直接使用`rm()`函数要多，但是它提供了更多的灵活性和控制，使得删除对象的过程更加安全和可控。

#### 环境

在R中，环境（Environment）是一个存储变量、函数和其他对象的结构。每个环境都有一个父环境，可以有任意数量的子环境。环境之间形成了一个环境链或者说是环境树。

以下是R中常见的几种环境：

1.  **全局环境（Global Environment）**：这是你在R控制台中直接创建的对象所在的环境。全局环境的父环境是最后一个被加载的包的环境。

2.  **包环境（Package Environments）**：每个被加载的包都有自己的环境，包环境中包含了该包中定义的所有函数和对象。包环境的父环境通常是其他包的环境或者是基础包环境。

3.  **基础包环境（Base Package Environment）**：这个环境包含了R的基础包（base package）中的函数和对象。它的父环境是全局环境。

4.  **函数环境（Function Environments）**：每个函数都有自己的环境，这个环境在函数被调用时创建，函数中定义的所有变量都存储在这个环境中。函数环境的父环境是函数被定义时的环境。

5.  **空环境（Empty Environment）**：这是环境链的最后一个环境，它没有父环境。

你可以使用`environment()`函数获取一个函数或者一个对象的环境，使用`parent.env()`函数获取一个环境的父环境，使用`ls()`函数列出一个环境中的所有对象。

#### check_columns

```{r}
check_columns <- function(dtf, query_colnames) {
  stopifnot(any(c('data.frame', 'data.table') %in% class(dtf)))
  missing_colnames <- setdiff(query_colnames, colnames(dtf))
  if (length(missing_colnames) > 0) {
    mymessage('check_colnames',
              sprintf('missing colnames: %s',
                      paste(missing_colnames, collapse = ', ')),
              f = stop)
  }
}

```

这段R代码定义了一个名为`check_columns`的函数。该函数用于检查给定的数据框（`dtf`）是否包含指定的列名（`query_colnames`）。

函数的第一行使用`stopifnot`函数来确保`dtf`是`data.frame`或`data.table`类的对象。如果不满足这个条件，代码会停止执行并抛出一个错误。

接下来，函数使用**`setdiff`函数**来找出`query_colnames`中存在但在`dtf`中不存在的列名。如果有缺失的列名，函数会进入条件判断语句。

在条件判断语句中，函数调用了一个名为`mymessage`的函数，它的作用是生成一条消息。这条消息包含了缺失的列名，并使用逗号将它们连接起来。最后，函数调用`stop`函数来停止代码的执行，并将消息作为错误信息抛出。

下面是一个使用`check_columns`函数的例子：

```{r}
# 创建一个数据框
df <- data.frame(A = 1:5, B = letters[1:5])
class(df)
all(c("data.frame", "data.table") %in% class(df))

# 检查数据框的列名
check_columns(df, c("A", "B", "C"))

# Error in mymessage("check_colnames", sprintf("missing colnames: %s", paste(missing_colnames,  : 
#   2024-02-05 03:13:10.262567 | check_columns(df, c("A", "B", "C")) | check_colnames
# missing colnames: C

check_columns(df, c("A", "B"))
```

在这个例子中，我们首先创建了一个包含两列的数据框`df`。然后，我们调用`check_columns`函数来检查`df`是否包含列"A"、"B"和"C"。由于"C"列在`df`中不存在，函数会抛出一个错误，提示缺失的列名是"C"。

```{r}
#  df
# > class(df)
# [1] "data.frame"
# > all(c("data.frame", "data.table") %in% class(df))
# [1] FALSE
# Connected to your session in progress, last started 2024-Feb-05 03:02:46 UTC (8 minutes ago)

```

在R中，`class()`函数返回的是对象的类名，而`%in%`操作符用于检查左侧的元素是否在右侧的向量中。因此，`c("data.frame", "data.table") %in% class(df)`这行代码的意思是检查`"data.frame"`和`"data.table"`是否都在`df`的类名中。

在你的例子中，`df`的类名只有`"data.frame"`，并没有`"data.table"`，所以`c("data.frame", "data.table") %in% class(df)`返回的是`c(TRUE, FALSE)`，表示`"data.frame"`在`df`的类名中，而`"data.table"`不在。

然后，`all()`函数检查其参数中的所有元素是否都为`TRUE`。在这个例子中，由于`c("data.frame", "data.table") %in% class(df)`返回的是`c(TRUE, FALSE)`，所以`all(c("data.frame", "data.table") %in% class(df))`的结果是`FALSE`。

如果你想检查`df`是否是`"data.frame"`或者`"data.table"`的实例，你应该使用`any()`函数，而不是`all()`函数。**`any()`函数会检查其参数中是否有任何元素为`TRUE`**。所以，你应该这样写：

```{r}
any(c("data.frame", "data.table") %in% class(df))
```
